{"remainingRequest":"F:\\WebStorm\\new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\WebStorm\\new\\src\\components\\InMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\WebStorm\\new\\src\\components\\InMap.vue","mtime":1637829474054},{"path":"F:\\WebStorm\\new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637058075377},{"path":"F:\\WebStorm\\new\\node_modules\\babel-loader\\lib\\index.js","mtime":1636697064810},{"path":"F:\\WebStorm\\new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637058075377},{"path":"F:\\WebStorm\\new\\node_modules\\vue-loader\\lib\\index.js","mtime":1628769447361}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport inMap from 'inmap'\r\n\r\nexport default {\r\n  name: 'inMap',\r\n  props: {\r\n    toolbar: {\r\n      default: false\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      isEdit: false,\r\n      inmap: null,\r\n      overlay: null\r\n    }\r\n  },\r\n  mounted () {\r\n    const myCity = new BMap.LocalCity()\r\n    myCity.get(result => {\r\n      console.log(result)\r\n      this.inmap = new inMap.Map({\r\n        id: this.$refs.map,\r\n        // skin: \"WhiteLover\",\r\n        center: [result.center.lng, result.center.lat],\r\n        zoom: {\r\n          value: 12,\r\n          show: true,\r\n          max: 20,\r\n          min: 5\r\n        }\r\n      })\r\n      this.overlay = new inMap.PolygonEditorOverlay({\r\n        style: {\r\n          point: {\r\n            normal: {\r\n              backgroundColor: 'rgba(93,158,247,0.7)', // 填充颜色\r\n              size: 3 // 半径\r\n            },\r\n            mouseOver: {\r\n              backgroundColor: 'rgba(93,158,247,1)',\r\n              borderColor: 'rgba(93,158,247,1)',\r\n              borderWidth: 1\r\n            },\r\n            selected: {\r\n              borderWidth: 1,\r\n              backgroundColor: 'rgba(184,0,0,1)'\r\n            }\r\n          },\r\n          virtualPoint: {\r\n            normal: {\r\n              backgroundColor: 'rgba(0, 0, 0, 0)',\r\n              borderWidth: 1,\r\n              borderColor: 'rgba(0,131,238, 1)',\r\n              size: 3\r\n            },\r\n            mouseOver: {\r\n              backgroundColor: 'rgba(0, 0, 0, 0)',\r\n              borderWidth: 2\r\n            }\r\n          },\r\n          polygon: {\r\n            normal: {\r\n              borderWidth: 1.5,\r\n              backgroundColor: 'rgba(0,184,255,0.3)'\r\n            }\r\n          }\r\n        },\r\n        event: {\r\n          onCreated (event) {\r\n            console.log('onCreate', event)\r\n          },\r\n          onChange (type, event) {\r\n            console.log('onChange', type, event)\r\n          },\r\n          onDelete (event) {\r\n            console.log('onDelete', event)\r\n          }\r\n        }\r\n      })\r\n      this.inmap.add(this.overlay)\r\n    })\r\n  },\r\n  methods: {\r\n    createPath () {\r\n      this.overlay.create()\r\n    },\r\n    getPath () {\r\n      const pathData = this.overlay.getPath()\r\n      alert(JSON.stringify(pathData))\r\n      return pathData\r\n    },\r\n    setPath () {\r\n      const bdary = new BMap.Boundary()\r\n      const name = '上海市普陀区'\r\n      // 获取行政区域\r\n      bdary.get(name, rs => {\r\n        console.log(rs)\r\n        // 行政区域的点有多少个\r\n        const count = rs.boundaries.length\r\n        const mapData = []\r\n        for (let i = 0; i < count; i++) {\r\n          const ply = new BMap.Polygon(rs.boundaries[i], {\r\n            strokeWeight: 2,\r\n            strokeColor: '#ff0000'\r\n          })\r\n          const points = []\r\n          ply.getPath().forEach(point => {\r\n            points.push([point.lng, point.lat])\r\n          })\r\n          mapData.push(points)\r\n        }\r\n        this.overlay.setPath({\r\n          geometry: {\r\n            type: 'MultiPolygon',\r\n            coordinates: [mapData]\r\n          }\r\n        })\r\n      })\r\n    },\r\n    changeEditStatus () {\r\n      this.isEdit = !this.isEdit\r\n      return this.isEdit ? this.overlay.enableEditing() : this.overlay.disableEditing()\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["InMap.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"InMap.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"inmap\">\r\n    <div class=\"button-group\" v-show=\"toolbar\">\r\n      <Button type=\"primary\" @click=\"createPath()\">创建围栏</Button>\r\n      <Button @click=\"changeEditStatus()\">{{ isEdit ? '关闭编辑' : '启用编辑' }}</Button>\r\n      <Button @click=\"getPath()\">获得围栏路径坐标</Button>\r\n    </div>\r\n    <div class=\"map\" ref=\"map\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport inMap from 'inmap'\r\n\r\nexport default {\r\n  name: 'inMap',\r\n  props: {\r\n    toolbar: {\r\n      default: false\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      isEdit: false,\r\n      inmap: null,\r\n      overlay: null\r\n    }\r\n  },\r\n  mounted () {\r\n    const myCity = new BMap.LocalCity()\r\n    myCity.get(result => {\r\n      console.log(result)\r\n      this.inmap = new inMap.Map({\r\n        id: this.$refs.map,\r\n        // skin: \"WhiteLover\",\r\n        center: [result.center.lng, result.center.lat],\r\n        zoom: {\r\n          value: 12,\r\n          show: true,\r\n          max: 20,\r\n          min: 5\r\n        }\r\n      })\r\n      this.overlay = new inMap.PolygonEditorOverlay({\r\n        style: {\r\n          point: {\r\n            normal: {\r\n              backgroundColor: 'rgba(93,158,247,0.7)', // 填充颜色\r\n              size: 3 // 半径\r\n            },\r\n            mouseOver: {\r\n              backgroundColor: 'rgba(93,158,247,1)',\r\n              borderColor: 'rgba(93,158,247,1)',\r\n              borderWidth: 1\r\n            },\r\n            selected: {\r\n              borderWidth: 1,\r\n              backgroundColor: 'rgba(184,0,0,1)'\r\n            }\r\n          },\r\n          virtualPoint: {\r\n            normal: {\r\n              backgroundColor: 'rgba(0, 0, 0, 0)',\r\n              borderWidth: 1,\r\n              borderColor: 'rgba(0,131,238, 1)',\r\n              size: 3\r\n            },\r\n            mouseOver: {\r\n              backgroundColor: 'rgba(0, 0, 0, 0)',\r\n              borderWidth: 2\r\n            }\r\n          },\r\n          polygon: {\r\n            normal: {\r\n              borderWidth: 1.5,\r\n              backgroundColor: 'rgba(0,184,255,0.3)'\r\n            }\r\n          }\r\n        },\r\n        event: {\r\n          onCreated (event) {\r\n            console.log('onCreate', event)\r\n          },\r\n          onChange (type, event) {\r\n            console.log('onChange', type, event)\r\n          },\r\n          onDelete (event) {\r\n            console.log('onDelete', event)\r\n          }\r\n        }\r\n      })\r\n      this.inmap.add(this.overlay)\r\n    })\r\n  },\r\n  methods: {\r\n    createPath () {\r\n      this.overlay.create()\r\n    },\r\n    getPath () {\r\n      const pathData = this.overlay.getPath()\r\n      alert(JSON.stringify(pathData))\r\n      return pathData\r\n    },\r\n    setPath () {\r\n      const bdary = new BMap.Boundary()\r\n      const name = '上海市普陀区'\r\n      // 获取行政区域\r\n      bdary.get(name, rs => {\r\n        console.log(rs)\r\n        // 行政区域的点有多少个\r\n        const count = rs.boundaries.length\r\n        const mapData = []\r\n        for (let i = 0; i < count; i++) {\r\n          const ply = new BMap.Polygon(rs.boundaries[i], {\r\n            strokeWeight: 2,\r\n            strokeColor: '#ff0000'\r\n          })\r\n          const points = []\r\n          ply.getPath().forEach(point => {\r\n            points.push([point.lng, point.lat])\r\n          })\r\n          mapData.push(points)\r\n        }\r\n        this.overlay.setPath({\r\n          geometry: {\r\n            type: 'MultiPolygon',\r\n            coordinates: [mapData]\r\n          }\r\n        })\r\n      })\r\n    },\r\n    changeEditStatus () {\r\n      this.isEdit = !this.isEdit\r\n      return this.isEdit ? this.overlay.enableEditing() : this.overlay.disableEditing()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.inmap {\r\n  .map {\r\n    width: 100%;\r\n    height: 100%;\r\n    min-width: 200px;\r\n    min-height: 200px;\r\n  }\r\n  .button-group {\r\n    margin-top: 20px;\r\n    margin-bottom: 20px;\r\n  }\r\n  Button {\r\n    margin-right: 10px;\r\n  }\r\n}\r\n</style>\r\n"]}]}